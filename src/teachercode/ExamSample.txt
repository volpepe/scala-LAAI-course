You have 50 minutes to reply to the following 5 open-ended questions.


==========
QUESTION 1
==========

Consider the following function:

def mystery(f: Int=>Int, x: Int): Int = f(x+1)

What is the result of the evaluation of the following expression:

List(5,1,3) map (x=>x+mystery(_+1,x+1))

Justify your answer.

=========
SOLUTION:

Function mystery takes a function and a value, and returns the 
result of the application of that function to the successor of the
passed value. The function used as parameter in map takes a value
(taken from List(5,1,3)) and adds to it the result of invoking mystery 
passing the successor function and that value plus one. The overall 
result is to increase by 3 the value passed to this function. 
Hence, the overall result will be List(13,5,9)


==========
QUESTION 2
==========

What does the following function compute?

def mystery2(l: List[Int]) =
  (0 :: (l filter (_ < 100) map (x=>1))) reduceLeft (_ + _)

Justify your answer.

=========
SOLUTION:

Function mystery2 computes the numbers smaller than 100 in a List of Int.
In fact, filter is used to extract from the initial list only those
elements that are smaller than than 100. Then allo these values are
translated to 1 (via map), and finally an initial value 0 is added.
In this way it is possible to apply reduceLeft. Given that the
sum operation is passed to reduceLeft, the final result will be the
number of values equal to 1 in this final list.


==========
QUESTION 3
==========

Consider the following declarations:

val S = Set(1,3,4,7)
val S2 = S ++ (S map (_+1))

What is the type and the value of S2?
Justify your answer.

=========
SOLUTION:

The returned value will be of type Set[Int] and will be Set(1,3,4,7,2,5,8).
In fact, the set S is enriched with those values that can be obtained
by increasing by 1 the values it contains. Notice that the value 4, obtained
by increasing 3, is not added to the set in that sets do not contain duplicates.


==========
QUESTION 4
==========

Consider the following expression:

(List(3,9,12) foldLeft 4)(_ - _)

Describe its evaluation and the final computed value.

=========
SOLUTION:

foldLeft starts with accumulator 4, and then applies subtractions extracting
elements from the left of List List(3,9,12).
Hence the overall computed expression is:
(((4 - 3) - 9) - 12) = -20


==========
QUESTION 5
==========

The following function mystery3 is not tail recursive:

def max(x1: Int, x2: Int) = if (x1>x2) x1 else x2

def mystery3(l:List[Int]):Int =
  if (l == Nil) 0
  else max(l.head,mystery3(l.tail))

Write an equivalent tail recursive function.

=========
SOLUTION:


Function mystery computes the maximal value inside a List[Int]. A tail recursive 
version could be as follows:

def max(x1: Int, x2: Int) = if (x1>x2) x1 else x2

def mystery3(l:List[Int]):Int = {
  def extra(m: Int, l:List[Int]): Int =
    if (l == Nil) m
    else extra(max(m,l.head),l.tail)
  extra(0,l)
}